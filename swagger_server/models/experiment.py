# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Experiment(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, experiment: str=None, project: str=None, profile: str=None, cluster: str=None, start: str=None, end: str=None):  # noqa: E501
        """Experiment - a model defined in Swagger

        :param username: The username of this Experiment.  # noqa: E501
        :type username: str
        :param experiment: The experiment of this Experiment.  # noqa: E501
        :type experiment: str
        :param project: The project of this Experiment.  # noqa: E501
        :type project: str
        :param profile: The profile of this Experiment.  # noqa: E501
        :type profile: str
        :param cluster: The cluster of this Experiment.  # noqa: E501
        :type cluster: str
        :param start: The start of this Experiment.  # noqa: E501
        :type start: str
        :param end: The end of this Experiment.  # noqa: E501
        :type end: str
        """
        self.swagger_types = {
            'username': str,
            'experiment': str,
            'project': str,
            'profile': str,
            'cluster': str,
            'start': str,
            'end': str
        }

        self.attribute_map = {
            'username': 'username',
            'experiment': 'experiment',
            'project': 'project',
            'profile': 'profile',
            'cluster': 'cluster',
            'start': 'start',
            'end': 'end'
        }
        self._username = username
        self._experiment = experiment
        self._project = project
        self._profile = profile
        self._cluster = cluster
        self._start = start
        self._end = end

    @classmethod
    def from_dict(cls, dikt) -> 'Experiment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Experiment of this Experiment.  # noqa: E501
        :rtype: Experiment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this Experiment.


        :return: The username of this Experiment.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Experiment.


        :param username: The username of this Experiment.
        :type username: str
        """

        self._username = username

    @property
    def experiment(self) -> str:
        """Gets the experiment of this Experiment.


        :return: The experiment of this Experiment.
        :rtype: str
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment: str):
        """Sets the experiment of this Experiment.


        :param experiment: The experiment of this Experiment.
        :type experiment: str
        """
        if experiment is None:
            raise ValueError("Invalid value for `experiment`, must not be `None`")  # noqa: E501

        self._experiment = experiment

    @property
    def project(self) -> str:
        """Gets the project of this Experiment.


        :return: The project of this Experiment.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project: str):
        """Sets the project of this Experiment.


        :param project: The project of this Experiment.
        :type project: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def profile(self) -> str:
        """Gets the profile of this Experiment.


        :return: The profile of this Experiment.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile: str):
        """Sets the profile of this Experiment.


        :param profile: The profile of this Experiment.
        :type profile: str
        """
        if profile is None:
            raise ValueError("Invalid value for `profile`, must not be `None`")  # noqa: E501

        self._profile = profile

    @property
    def cluster(self) -> str:
        """Gets the cluster of this Experiment.


        :return: The cluster of this Experiment.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster: str):
        """Sets the cluster of this Experiment.


        :param cluster: The cluster of this Experiment.
        :type cluster: str
        """
        if cluster is None:
            raise ValueError("Invalid value for `cluster`, must not be `None`")  # noqa: E501

        self._cluster = cluster

    @property
    def start(self) -> str:
        """Gets the start of this Experiment.


        :return: The start of this Experiment.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start: str):
        """Sets the start of this Experiment.


        :param start: The start of this Experiment.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self) -> str:
        """Gets the end of this Experiment.


        :return: The end of this Experiment.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end: str):
        """Sets the end of this Experiment.


        :param end: The end of this Experiment.
        :type end: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end
