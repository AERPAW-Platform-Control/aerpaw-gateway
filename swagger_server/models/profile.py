# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Profile(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, creator: str=None, name: str=None, project: str=None, repourl: str=None, version: str=None, created: str=None, script: str=None, rspec: str=None, uuid: str=None):  # noqa: E501
        """Profile - a model defined in Swagger

        :param creator: The creator of this Profile.  # noqa: E501
        :type creator: str
        :param name: The name of this Profile.  # noqa: E501
        :type name: str
        :param project: The project of this Profile.  # noqa: E501
        :type project: str
        :param repourl: The repourl of this Profile.  # noqa: E501
        :type repourl: str
        :param version: The version of this Profile.  # noqa: E501
        :type version: str
        :param created: The created of this Profile.  # noqa: E501
        :type created: str
        :param script: The script of this Profile.  # noqa: E501
        :type script: str
        :param rspec: The rspec of this Profile.  # noqa: E501
        :type rspec: str
        :param uuid: The uuid of this Profile.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'creator': str,
            'name': str,
            'project': str,
            'repourl': str,
            'version': str,
            'created': str,
            'script': str,
            'rspec': str,
            'uuid': str
        }

        self.attribute_map = {
            'creator': 'creator',
            'name': 'name',
            'project': 'project',
            'repourl': 'repourl',
            'version': 'version',
            'created': 'created',
            'script': 'script',
            'rspec': 'rspec',
            'uuid': 'uuid'
        }
        self._creator = creator
        self._name = name
        self._project = project
        self._repourl = repourl
        self._version = version
        self._created = created
        self._script = script
        self._rspec = rspec
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'Profile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Profile of this Profile.  # noqa: E501
        :rtype: Profile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator(self) -> str:
        """Gets the creator of this Profile.


        :return: The creator of this Profile.
        :rtype: str
        """
        return self._creator

    @creator.setter
    def creator(self, creator: str):
        """Sets the creator of this Profile.


        :param creator: The creator of this Profile.
        :type creator: str
        """

        self._creator = creator

    @property
    def name(self) -> str:
        """Gets the name of this Profile.


        :return: The name of this Profile.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Profile.


        :param name: The name of this Profile.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project(self) -> str:
        """Gets the project of this Profile.


        :return: The project of this Profile.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project: str):
        """Sets the project of this Profile.


        :param project: The project of this Profile.
        :type project: str
        """

        self._project = project

    @property
    def repourl(self) -> str:
        """Gets the repourl of this Profile.


        :return: The repourl of this Profile.
        :rtype: str
        """
        return self._repourl

    @repourl.setter
    def repourl(self, repourl: str):
        """Sets the repourl of this Profile.


        :param repourl: The repourl of this Profile.
        :type repourl: str
        """

        self._repourl = repourl

    @property
    def version(self) -> str:
        """Gets the version of this Profile.


        :return: The version of this Profile.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this Profile.


        :param version: The version of this Profile.
        :type version: str
        """

        self._version = version

    @property
    def created(self) -> str:
        """Gets the created of this Profile.


        :return: The created of this Profile.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created: str):
        """Sets the created of this Profile.


        :param created: The created of this Profile.
        :type created: str
        """

        self._created = created

    @property
    def script(self) -> str:
        """Gets the script of this Profile.


        :return: The script of this Profile.
        :rtype: str
        """
        return self._script

    @script.setter
    def script(self, script: str):
        """Sets the script of this Profile.


        :param script: The script of this Profile.
        :type script: str
        """

        self._script = script

    @property
    def rspec(self) -> str:
        """Gets the rspec of this Profile.


        :return: The rspec of this Profile.
        :rtype: str
        """
        return self._rspec

    @rspec.setter
    def rspec(self, rspec: str):
        """Sets the rspec of this Profile.


        :param rspec: The rspec of this Profile.
        :type rspec: str
        """

        self._rspec = rspec

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Profile.


        :return: The uuid of this Profile.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Profile.


        :param uuid: The uuid of this Profile.
        :type uuid: str
        """

        self._uuid = uuid
