# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Reservation(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, username: str=None, project: str=None, cluster: str=None, start: str=None, end: str=None, type: str=None, nodes: int=None, experiment: str=None, uuid: str=None):  # noqa: E501
        """Reservation - a model defined in Swagger

        :param username: The username of this Reservation.  # noqa: E501
        :type username: str
        :param project: The project of this Reservation.  # noqa: E501
        :type project: str
        :param cluster: The cluster of this Reservation.  # noqa: E501
        :type cluster: str
        :param start: The start of this Reservation.  # noqa: E501
        :type start: str
        :param end: The end of this Reservation.  # noqa: E501
        :type end: str
        :param type: The type of this Reservation.  # noqa: E501
        :type type: str
        :param nodes: The nodes of this Reservation.  # noqa: E501
        :type nodes: int
        :param experiment: The experiment of this Reservation.  # noqa: E501
        :type experiment: str
        :param uuid: The uuid of this Reservation.  # noqa: E501
        :type uuid: str
        """
        self.swagger_types = {
            'username': str,
            'project': str,
            'cluster': str,
            'start': str,
            'end': str,
            'type': str,
            'nodes': int,
            'experiment': str,
            'uuid': str
        }

        self.attribute_map = {
            'username': 'username',
            'project': 'project',
            'cluster': 'cluster',
            'start': 'start',
            'end': 'end',
            'type': 'type',
            'nodes': 'nodes',
            'experiment': 'experiment',
            'uuid': 'uuid'
        }
        self._username = username
        self._project = project
        self._cluster = cluster
        self._start = start
        self._end = end
        self._type = type
        self._nodes = nodes
        self._experiment = experiment
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'Reservation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Reservation of this Reservation.  # noqa: E501
        :rtype: Reservation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def username(self) -> str:
        """Gets the username of this Reservation.


        :return: The username of this Reservation.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Reservation.


        :param username: The username of this Reservation.
        :type username: str
        """

        self._username = username

    @property
    def project(self) -> str:
        """Gets the project of this Reservation.


        :return: The project of this Reservation.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project: str):
        """Sets the project of this Reservation.


        :param project: The project of this Reservation.
        :type project: str
        """

        self._project = project

    @property
    def cluster(self) -> str:
        """Gets the cluster of this Reservation.


        :return: The cluster of this Reservation.
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster: str):
        """Sets the cluster of this Reservation.


        :param cluster: The cluster of this Reservation.
        :type cluster: str
        """

        self._cluster = cluster

    @property
    def start(self) -> str:
        """Gets the start of this Reservation.


        :return: The start of this Reservation.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start: str):
        """Sets the start of this Reservation.


        :param start: The start of this Reservation.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def end(self) -> str:
        """Gets the end of this Reservation.


        :return: The end of this Reservation.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end: str):
        """Sets the end of this Reservation.


        :param end: The end of this Reservation.
        :type end: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def type(self) -> str:
        """Gets the type of this Reservation.


        :return: The type of this Reservation.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Reservation.


        :param type: The type of this Reservation.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def nodes(self) -> int:
        """Gets the nodes of this Reservation.


        :return: The nodes of this Reservation.
        :rtype: int
        """
        return self._nodes

    @nodes.setter
    def nodes(self, nodes: int):
        """Sets the nodes of this Reservation.


        :param nodes: The nodes of this Reservation.
        :type nodes: int
        """
        if nodes is None:
            raise ValueError("Invalid value for `nodes`, must not be `None`")  # noqa: E501

        self._nodes = nodes

    @property
    def experiment(self) -> str:
        """Gets the experiment of this Reservation.


        :return: The experiment of this Reservation.
        :rtype: str
        """
        return self._experiment

    @experiment.setter
    def experiment(self, experiment: str):
        """Sets the experiment of this Reservation.


        :param experiment: The experiment of this Reservation.
        :type experiment: str
        """
        if experiment is None:
            raise ValueError("Invalid value for `experiment`, must not be `None`")  # noqa: E501

        self._experiment = experiment

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Reservation.


        :return: The uuid of this Reservation.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Reservation.


        :param uuid: The uuid of this Reservation.
        :type uuid: str
        """

        self._uuid = uuid
